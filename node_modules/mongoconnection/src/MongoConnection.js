/**
 * Mongo Connection
 *
 * Parses a connection object into the Mongo string
 */

"use strict";


/* Node modules */
var querystring = require("querystring");


/* Third-party modules */
var datatypes = require("datautils").data;


/* Files */


function contains(a, obj) {
    var len = a.length;
    for (var i = 0; i < len; i++) {
        if (JSON.stringify(a[i]) === JSON.stringify(obj)) {
            return true;
        }
    }
    return false;
}


function MongoConnection () {

    this.prefix = "mongodb://";
    this.auth = null;
    this.host = null;
    this.db = null;
    this.options = null;

    return this;

}


/**
 * Get Auth
 *
 * Gets the auth object for output
 *
 * @returns {string}
 */
MongoConnection.prototype.getAuth = function getAuth () {
    var str = [
        this.auth.username || "",
        this.auth.password || ""
    ].join(":");

    return str + "@";
};


/**
 * Get DB
 *
 * Returns the database setting
 *
 * @returns {string}
 */
MongoConnection.prototype.getDb = function getDb () {
    return this.db;
};


/**
 * Get Host
 *
 * Gets the host string
 *
 * @returns {string}
 */
MongoConnection.prototype.getHost = function getHost () {
    var hosts = [];

    this.host.forEach(function (host) {
        hosts.push(host.host + ":" + host.port);
    });

    return hosts.join(",");
};


MongoConnection.prototype.getOptions = function getOptions () {
    var str = "?";
    str += querystring.stringify(this.options);
    return str;
};


/**
 * Set Auth
 *
 * Sets the authorisation object (username and password)
 *
 * @param {object} auth
 */
MongoConnection.prototype.setAuth = function setAuth (auth) {

    auth = datatypes.setObject(auth, {});

    var username = datatypes.setString(auth.username, null);
    var password = datatypes.setString(auth.password, null);

    if (username !== null || password !== null) {
        this.auth = {
            username: username,
            password: password
        };
    }

};


/**
 * Set DB
 *
 * Sets the database string.  Removes any initial slashses
 *
 * @param {string} db
 */
MongoConnection.prototype.setDb = function setDb (db) {
    db = datatypes.setString(db, null);

    if (db !== null) {
        /* Remove any initial slashes */
        db = db.replace(/^(\/{1,})/, "");

        if (db !== "") {
            this.db = db;
        }
    }
};


/**
 * Set Host
 *
 * Checks for duplicated data and then sets to the
 * host stack.
 *
 * @param {string} host
 * @param {number} port
 */
MongoConnection.prototype.setHost = function setHost (host, port) {
    host = datatypes.setString(host, "localhost");
    port = datatypes.setInt(port, 27017);

    if (this.host === null) {
        this.host = [];
    }

    var obj = {
        host: host,
        port: port
    };

    /* If not already set, add to the stack */
    if (contains(this.host, obj) === false) {
        this.host.push(obj);
    }
};


/**
 * Set Options
 *
 * Sets the options object.  Checks it's an object and greater
 * than 0.
 *
 * @param {object} options
 */
MongoConnection.prototype.setOptions = function setOptions (options) {

    options = datatypes.setObject(options, null);

    if (options !== null && Object.keys(options).length > 0) {
        /* Check it's not an empty object */
        this.options = options;
    }

};


/**
 * To String
 *
 * Converts the MongoConnection into a string
 *
 * @returns {string}
 */
MongoConnection.prototype.toString = function toString () {

    var str = [];

    str.push(this.prefix);

    if (this.auth !== null) {
        str.push(this.getAuth());
    }

    if (this.host === null) {
        /* No hosts - add in the localhost */
        this.setHost();
    }
    str.push(this.getHost());
    str.push("/");

    if (this.db !== null) {
        str.push(this.getDb());
    }

    if (this.options !== null) {
        str.push(this.getOptions());
    }

    return str.join("");

};


module.exports = {

    toString: function (options) {

        options = datatypes.setObject(options, {});

        /* Create instance of MongoConnection */
        var connection = new MongoConnection();

        /* Set the authorisation */
        if (options.auth) {
            connection.setAuth(options.auth);
        }

        /* Set the hosts */
        if (options.host) {

            /* Allow in strings or arrays */
            if (options.host instanceof Array === false) {
                options.host = [options.host];
            }

            options.host.forEach(function (data, i) {

                var host;
                var port;

                if (typeof data === "string") {
                    /* String - split out the host and port */
                    var tmp = data.split(":");

                    host = tmp[0];
                    port = tmp[1];
                } else {
                    host = data.host;
                    port = data.port;
                }

                connection.setHost(host, port, i === 2);
            });
        }

        /* Set the database */
        if (options.db) {
            connection.setDb(options.db);
        }

        /* Set the options */
        connection.setOptions(options.options);

        /* Output as a string */
        return connection.toString();

    }

};
